High Priority
--------------
- General
    - DEBUG:
    	- Add DEBUG3
	- Add indentation to DEBUG.
	- Organize the output.
    - Remove the class library. All the library functions should be duplicated to the function class.
    - Rename SetWriteAccess.
    - Add scheduling commands:
	- fuse(),
	- split(),
	- duplicate()
    - split() and interchange() should be done regourously using real ISL constraint (floor should be expressed as ISL constraints). 
      Now setting the space names is flicky.
    - Support more isl_ast expressions in create_halide_expr_from_isl_ast_expr
    - Currently if you specify an access function that has constraints,
    the constraints are not taken in consideration.  The access function is
    applied for all the values of i and j.

- Halide support
	9- The computation expression should become an ISL expression.
	10- Try blurxy.
	- compute_halide_call_graph().


Low Priority
-------------
- Data layout
    - Test buffer access linearization for buffers with more than 3 dimensions.
     Buffer access linearization is now done in
     Computation::create_halide_assignement(std::vector<std::string> &iterators).
    - Check if the declaration of an array with a symbolic constant size is
    possible.

- General
   - Currently all loop iterators have an Int32 type.  Users should be able to
   choose which data type they can use (this is important to support loops over
   very large datasets).
   - Create a class "Buffer" to be used instead of using the Halide buffer
   class.  The Halide::Buffer class should only be used during code
   generation.  Currently Halide can only handle 3D arrays, make sure you
   check for this during code generation.

- Building and compiling
   - ISL, Halide should be distributed with COLi and should be
   compiled automatically.
   - Compile COLi into one shared library.
