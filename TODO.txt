High Priority
--------------
- General
    - DEBUG:
    	- Add DEBUG3
	- Add indentation to DEBUG.
	- Organize the output.


- Scheduling
   3- Test multiple successive transformations to test the split() and
   interchange() regourously.
    - Add scheduling commands:
	- fuse(),
	- split(),
	- duplicate()
    - split() and interchange() should be done regourously.  Now setting the space names is flicky.
    - Support more isl_ast expressions in create_halide_expr_from_isl_ast_expr
 
- Halide support
	6- New class parameters:
		- a class to represent iteration set parameters.
		- during code generation, parameters are generated before any loops start
		  to be generated.  Parameters are supposed to constant throughout the whole
		  program.
		- Add a vector of parameters to the function class.
	7- Changes on the computation class:
      		- The constructor should not take a Halide expression, the Halide expression
		  is now set using a separate function.
		- Add the binding function which simply sets the access function of a
		  computation to a buffer (one-to-one).
		- Add flag is_binded to a computation to check if it binded to a variable.  When generating code,
		  check that the arguments are all binded.  Currently we do not support unbinded arguments.
		- Function arguments should be transformed into computations.
	8- Add a computation to the outputs of a function. function.add_output().
	- compute_halide_call_graph().


- Data layout
    - Currently if you specify an access function that has constraints,
    the constraints are not taken in consideration.  The access function is
    applied for all the values of i and j.


Low Priority
-------------
- Data layout
    - Test buffer access linearization for buffers with more than 3 dimensions.
     Buffer access linearization is now done in
     Computation::create_halide_assignement(std::vector<std::string> &iterators).
    - Check if the declaration of an array with a symbolic constant size is
    possible.

- General
   - Currently all loop iterators have an Int32 type.  Users should be able to
   choose which data type they can use (this is important to support loops over
   very large datasets).
   - Create a class "Buffer" to be used instead of using the Halide buffer
   class.  The Halide::Buffer class should only be used during code
   generation.  Currently Halide can only handle 3D arrays, make sure you
   check for this during code generation.

- Building and compiling
   - ISL, Halide should be distributed with COLi and should be
   compiled automatically.
   - Compile COLi into one shared library.
