High Priority
--------------
- Code Cleaning
    - Factorize code.
    - Document important classes.
    - Split core.h into specialized codegen.h files.
    - Add basic asserts.
    - Add a test file to test the basic functions.


- Scheduling
    - Assert that a schedule, an access function are provided before code
    generation.
    - All schedules should be aligned before scheduling otherwise shorter
    times will be considered small lexicographically.
    - Currently, when multiple computations are declared, users can specify the
    order between these computations only when the explicit schedule time is
    specified.  Enable users to express the order between computations if the
    .Tile(), .Split(), ... is used.
    - Tiling: support tiling when the loop size is not multiple of tile size.
    - Add Fusion(), Distribution() commands.


- Data layout
    - Currently if you specify an access function that has constraints,
    the constraints are not taken in consideration.  The access function is
    applied for all the values of i and j.


Low Priority
-------------
- Data layout
    - Test buffer access linearization for buffers with more than 3 dimensions.
     Buffer access linearization is now done in
     Computation::create_halide_assignement(std::vector<std::string> &iterators).
    - Check if the declaration of an array with a symbolic constant size is
    possible.

- General
   - Currently all loop iterators have an Int32 type.  Users should be able to
   choose which data type they can use (this is important to support loops over
   very large datasets).
   - Create a class "Buffer" to be used instead of using the Halide buffer
   class.  The Halide::Buffer class should only be used during code
   generation.  Currently Halide can only handle 3D arrays, make sure you
   check for this during code generation.
