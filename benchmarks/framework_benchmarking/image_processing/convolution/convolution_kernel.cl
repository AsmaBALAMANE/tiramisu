static const char kernel_code[] = "\n"
"__kernel void kernel0(__global unsigned char *conv, __global const float *kernelX, __global unsigned char *src, int step, int rows, int cols, int kernelX_length)\n"
"{\n"
"    int b0 = get_group_id(0), b1 = get_group_id(1);\n"
"    int t0 = get_local_id(0), t1 = get_local_id(1), t2 = get_local_id(2);\n"
"    float private_prod1;\n"
"    __local unsigned char shared_conv[32][32][3];\n"
"    __local unsigned char shared_src[32][32][3];\n"
"\n"
"    #define ppcg_min(x,y)    min((__typeof__(x + y)) x, (__typeof__(x + y)) y)\n"
"    for (int c0 = 32 * b0; c0 < rows; c0 += 8192)\n"
"      for (int c2 = 0; c2 < cols; c2 += 32) {\n"
"        if (kernelX_length >= 1 && t2 <= 2 && rows >= t0 + c0 + 1)\n"
"          for (int c4 = t1; c4 <= ppcg_min(31, step - c2 - 1); c4 += 3)\n"
"            shared_src[t0][c4][t2] = src[((t0 + c0) * step + (c2 + c4)) * 3 + t2];\n"
"        barrier(CLK_LOCAL_MEM_FENCE | CLK_GLOBAL_MEM_FENCE);\n"
"        if (rows >= t0 + c0 + 1)\n"
"          for (int c5 = t2; c5 <= ppcg_min(31, cols - c2 - 1); c5 += 4) {\n"
"            private_prod1 = 0.;\n"
"            for (int c6 = 0; c6 < kernelX_length; c6 += 1)\n"
"              private_prod1 += (shared_src[t0][c5][t1] * kernelX[c6]);\n"
"            shared_conv[t0][c5][t1] = private_prod1;\n"
"          }\n"
"        barrier(CLK_LOCAL_MEM_FENCE | CLK_GLOBAL_MEM_FENCE);\n"
"        if (t2 <= 2 && rows >= t0 + c0 + 1)\n"
"          for (int c4 = t1; c4 <= ppcg_min(31, cols - c2 - 1); c4 += 3)\n"
"            conv[((t0 + c0) * step + (c2 + c4)) * 3 + t2] = shared_conv[t0][c4][t2];\n"
"      }\n"
"}\n";
